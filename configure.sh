#!/usr/bin/env bash

# Interactive configurator for DevCoin.
# - Prompts for common env vars
# - Auto-detects generated key files and public keys
# - Writes .env and keys.txt for the node
# - Prints next-step hints

set -euo pipefail
ROOT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
cd "$ROOT_DIR"

BOLD="\033[1m"; RESET="\033[0m"
ask() {
  local var="$1"; local prompt="$2"; local def="${3-}"; local secret="${4-}"
  local cur="${!var-}"; local val
  if [[ -n "$cur" ]]; then def="$cur"; fi
  if [[ -n "$def" ]]; then prompt+=" [$def]"; fi
  prompt+=" : "
  if [[ "$secret" == "secret" ]]; then
    read -r -s -p "$prompt" val; echo
  else
    read -r -p "$prompt" val
  fi
  if [[ -z "$val" && -n "$def" ]]; then val="$def"; fi
  printf -v "$var" '%s' "$val"
}

info() { printf "[config] %b%s%b\n" "$BOLD" "$*" "$RESET"; }

# Try to auto-detect oracle key files under src/contrib-oracle/secrets/
autokey_dir="$ROOT_DIR/src/contrib-oracle/secrets"
priv_guess=""; pub_guess="";
if [[ -d "$autokey_dir" ]]; then
  priv_guess=$(ls "$autokey_dir"/*.key 2>/dev/null | head -n1 || true)
  pub_guess=$(ls "$autokey_dir"/*.pub 2>/dev/null | head -n1 || true)
fi

# Collect values
info "Node settings"
ask DEVCOIN_ADDR "Node bind address" "127.0.0.1:8080"
ask DEVCOIN_DATA_DIR "Data directory" "$ROOT_DIR/.devcoin-data"
ask DEVCOIN_AUTHORITIES "Authority IDs (comma-separated)" "authority1"
ask DEVCOIN_MINT_TOKEN "Mint bearer token" "" secret
ask DEVCOIN_REQUIRE_SIGS "Require Ed25519 signatures? (true/false)" "true"

info "Oracle settings"
ask ORACLE_ADDR "Oracle bind address" ":8090"
ask BLOCKCHAIN_API "Node base URL" "http://127.0.0.1:8080"
ask REPO_WHITELIST "Repo whitelist (owner/repo, comma-separated)" ""
ask GITHUB_WEBHOOK_SECRET "GitHub webhook secret (or comma-separated)" "" secret
ask ORACLE_PROPOSER "Oracle proposer ID (must be in authorities)" "authority1"
ask ORACLE_NODE_TOKEN "Oracle->Node bearer token (match node)" "${DEVCOIN_MINT_TOKEN-}" secret
ask ORACLE_ED25519_PRIVKEY_FILE "Oracle private key file" "$priv_guess"

# Create keys.txt from detected pub key or prompt if missing
keys_file="$ROOT_DIR/keys.txt"
pub_val=""
if [[ -n "$pub_guess" && -f "$pub_guess" ]]; then
  pub_val="$(cat "$pub_guess")"
fi

if [[ -z "$pub_val" ]]; then
  info "No public key detected. If you have one, paste it now (blank to skip):"
  read -r -p "Public key (base64/hex): " pub_val
fi

if [[ -n "$pub_val" ]]; then
  # Use first authority id as the key owner
  first_auth="$(echo "$DEVCOIN_AUTHORITIES" | tr ',' '\n' | sed -E 's/^\s+|\s+$//g' | head -n1)"
  printf "# DevCoin authority public keys\n# format: <authorityID>=<base64-or-hex-ed25519-public-key>\n%s=%s\n" "$first_auth" "$pub_val" > "$keys_file"
  DEVCOIN_AUTHORITIES_KEYS="$keys_file"
else
  DEVCOIN_AUTHORITIES_KEYS=""
fi

# Normalize booleans
case "${DEVCOIN_REQUIRE_SIGS,,}" in
  1|true|yes|y) DEVCOIN_REQUIRE_SIGS=true ;; 
  *) DEVCOIN_REQUIRE_SIGS=false ;;
esac

# If no public key provided, disable signature enforcement for a smoother start
if [[ -z "${DEVCOIN_AUTHORITIES_KEYS}" || ! -s "${DEVCOIN_AUTHORITIES_KEYS}" ]]; then
  if [[ "${DEVCOIN_REQUIRE_SIGS}" == "true" ]]; then
    info "No authority public key provided; disabling DEVCOIN_REQUIRE_SIGS for now."
    DEVCOIN_REQUIRE_SIGS=false
  fi
fi

# Write .env
cat > "$ROOT_DIR/.env" <<EOF
# Generated by configure.sh
DEVCOIN_ADDR=$DEVCOIN_ADDR
DEVCOIN_DATA_DIR=$DEVCOIN_DATA_DIR
DEVCOIN_AUTHORITIES=$DEVCOIN_AUTHORITIES
DEVCOIN_MINT_TOKEN=$DEVCOIN_MINT_TOKEN
DEVCOIN_AUTHORITIES_KEYS=$DEVCOIN_AUTHORITIES_KEYS
DEVCOIN_REQUIRE_SIGS=$DEVCOIN_REQUIRE_SIGS

ORACLE_ADDR=$ORACLE_ADDR
BLOCKCHAIN_API=$BLOCKCHAIN_API
REPO_WHITELIST=$REPO_WHITELIST
GITHUB_WEBHOOK_SECRET=$GITHUB_WEBHOOK_SECRET
ORACLE_NODE_TOKEN=$ORACLE_NODE_TOKEN
ORACLE_PROPOSER=$ORACLE_PROPOSER
ORACLE_ED25519_PRIVKEY_FILE=$ORACLE_ED25519_PRIVKEY_FILE
EOF

info "Wrote .env and keys file (if provided)."
if [[ -n "$DEVCOIN_AUTHORITIES_KEYS" ]]; then
  info "Authority keys file: $DEVCOIN_AUTHORITIES_KEYS"
fi
info "Next:" 
printf "  1) %s\n" "Review and edit .env if needed"
printf "  2) %s\n" "Start services: ./start.sh (it auto-loads .env)"
